# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  firstName: String
  lastName: String
  phoneNumbers: String
  clerkId: String
  email: String
  role: String
  password: PasswordState
  permissions: String
  configuration: JSON
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  updatedAt: DateTime
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  clerkId: String
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  firstName: StringFilter
  lastName: StringFilter
  phoneNumbers: StringFilter
  clerkId: StringFilter
  email: StringFilter
  role: StringNullableFilter
  permissions: StringNullableFilter
  tags: TagManyRelationFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  firstName: OrderDirection
  lastName: OrderDirection
  phoneNumbers: OrderDirection
  clerkId: OrderDirection
  email: OrderDirection
  role: OrderDirection
  permissions: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  firstName: String
  lastName: String
  phoneNumbers: String
  clerkId: String
  email: String
  role: String
  password: String
  permissions: String
  configuration: JSON
  tags: TagRelateToManyForUpdateInput
  updatedAt: DateTime
  createdAt: DateTime
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  firstName: String
  lastName: String
  phoneNumbers: String
  clerkId: String
  email: String
  role: String
  password: String
  permissions: String
  configuration: JSON
  tags: TagRelateToManyForCreateInput
  updatedAt: DateTime
  createdAt: DateTime
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Cluster {
  id: ID!
  name: String
  description: String
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  lists(where: ListWhereInput! = {}, orderBy: [ListOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ListWhereUniqueInput): [List!]
  listsCount(where: ListWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input ClusterWhereUniqueInput {
  id: ID
}

input ClusterWhereInput {
  AND: [ClusterWhereInput!]
  OR: [ClusterWhereInput!]
  NOT: [ClusterWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  users: UserManyRelationFilter
  lists: ListManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input ListManyRelationFilter {
  every: ListWhereInput
  some: ListWhereInput
  none: ListWhereInput
}

input ClusterOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ClusterUpdateInput {
  name: String
  description: String
  users: UserRelateToManyForUpdateInput
  lists: ListRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input ListRelateToManyForUpdateInput {
  disconnect: [ListWhereUniqueInput!]
  set: [ListWhereUniqueInput!]
  create: [ListCreateInput!]
  connect: [ListWhereUniqueInput!]
}

input ClusterUpdateArgs {
  where: ClusterWhereUniqueInput!
  data: ClusterUpdateInput!
}

input ClusterCreateInput {
  name: String
  description: String
  users: UserRelateToManyForCreateInput
  lists: ListRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input ListRelateToManyForCreateInput {
  create: [ListCreateInput!]
  connect: [ListWhereUniqueInput!]
}

type List {
  id: ID!
  name: String
  description: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  clusters(where: ClusterWhereInput! = {}, orderBy: [ClusterOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ClusterWhereUniqueInput): [Cluster!]
  clustersCount(where: ClusterWhereInput! = {}): Int
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  products(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductWhereUniqueInput): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  items(where: InventoryWhereInput! = {}, orderBy: [InventoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InventoryWhereUniqueInput): [Inventory!]
  itemsCount(where: InventoryWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input ListWhereUniqueInput {
  id: ID
}

input ListWhereInput {
  AND: [ListWhereInput!]
  OR: [ListWhereInput!]
  NOT: [ListWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  tags: TagManyRelationFilter
  clusters: ClusterManyRelationFilter
  users: UserManyRelationFilter
  products: ProductManyRelationFilter
  items: InventoryManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input ClusterManyRelationFilter {
  every: ClusterWhereInput
  some: ClusterWhereInput
  none: ClusterWhereInput
}

input ProductManyRelationFilter {
  every: ProductWhereInput
  some: ProductWhereInput
  none: ProductWhereInput
}

input InventoryManyRelationFilter {
  every: InventoryWhereInput
  some: InventoryWhereInput
  none: InventoryWhereInput
}

input ListOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ListUpdateInput {
  name: String
  description: String
  tags: TagRelateToManyForUpdateInput
  clusters: ClusterRelateToManyForUpdateInput
  users: UserRelateToManyForUpdateInput
  products: ProductRelateToManyForUpdateInput
  items: InventoryRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ClusterRelateToManyForUpdateInput {
  disconnect: [ClusterWhereUniqueInput!]
  set: [ClusterWhereUniqueInput!]
  create: [ClusterCreateInput!]
  connect: [ClusterWhereUniqueInput!]
}

input ProductRelateToManyForUpdateInput {
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

input InventoryRelateToManyForUpdateInput {
  disconnect: [InventoryWhereUniqueInput!]
  set: [InventoryWhereUniqueInput!]
  create: [InventoryCreateInput!]
  connect: [InventoryWhereUniqueInput!]
}

input ListUpdateArgs {
  where: ListWhereUniqueInput!
  data: ListUpdateInput!
}

input ListCreateInput {
  name: String
  description: String
  tags: TagRelateToManyForCreateInput
  clusters: ClusterRelateToManyForCreateInput
  users: UserRelateToManyForCreateInput
  products: ProductRelateToManyForCreateInput
  items: InventoryRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ClusterRelateToManyForCreateInput {
  create: [ClusterCreateInput!]
  connect: [ClusterWhereUniqueInput!]
}

input ProductRelateToManyForCreateInput {
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

input InventoryRelateToManyForCreateInput {
  create: [InventoryCreateInput!]
  connect: [InventoryWhereUniqueInput!]
}

type Product {
  id: ID!
  name: String
  description: String
  category: String
  sku: String
  barcode: String
  attributes: JSON
  isComposite: Boolean
  cost: Float
  price: Float
  taxRate: Float
  reorderLevel: Int
  unit: String
  quantity: Int
  supplier: String
  leadTime: Int
  status: String
  isHidden: Boolean
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  bom: BOM
  createdAt: DateTime
  updatedAt: DateTime
}

input ProductWhereUniqueInput {
  id: ID
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  category: StringFilter
  sku: StringFilter
  barcode: StringFilter
  isComposite: BooleanFilter
  cost: FloatNullableFilter
  price: FloatNullableFilter
  taxRate: FloatNullableFilter
  reorderLevel: IntNullableFilter
  unit: StringFilter
  quantity: IntNullableFilter
  supplier: StringFilter
  leadTime: IntNullableFilter
  status: StringNullableFilter
  isHidden: BooleanFilter
  users: UserManyRelationFilter
  tags: TagManyRelationFilter
  bom: BOMWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input ProductOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  category: OrderDirection
  sku: OrderDirection
  barcode: OrderDirection
  isComposite: OrderDirection
  cost: OrderDirection
  price: OrderDirection
  taxRate: OrderDirection
  reorderLevel: OrderDirection
  unit: OrderDirection
  quantity: OrderDirection
  supplier: OrderDirection
  leadTime: OrderDirection
  status: OrderDirection
  isHidden: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ProductUpdateInput {
  name: String
  description: String
  category: String
  sku: String
  barcode: String
  attributes: JSON
  isComposite: Boolean
  cost: Float
  price: Float
  taxRate: Float
  reorderLevel: Int
  unit: String
  quantity: Int
  supplier: String
  leadTime: Int
  status: String
  isHidden: Boolean
  users: UserRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
  bom: BOMRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input BOMRelateToOneForUpdateInput {
  create: BOMCreateInput
  connect: BOMWhereUniqueInput
  disconnect: Boolean
}

input ProductUpdateArgs {
  where: ProductWhereUniqueInput!
  data: ProductUpdateInput!
}

input ProductCreateInput {
  name: String
  description: String
  category: String
  sku: String
  barcode: String
  attributes: JSON
  isComposite: Boolean
  cost: Float
  price: Float
  taxRate: Float
  reorderLevel: Int
  unit: String
  quantity: Int
  supplier: String
  leadTime: Int
  status: String
  isHidden: Boolean
  users: UserRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
  bom: BOMRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input BOMRelateToOneForCreateInput {
  create: BOMCreateInput
  connect: BOMWhereUniqueInput
}

type Inventory {
  id: ID!
  name: String
  description: String
  batchNumber: String
  sku: String
  quantity: Int
  unit: String
  location: String
  expiryDate: DateTime
  receivedDate: DateTime
  purchasePrice: Float
  salePrice: Float
  status: String
  supplier: String
  isReserved: Boolean
  isDamaged: Boolean
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  bom(where: BOMWhereInput! = {}, orderBy: [BOMOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BOMWhereUniqueInput): [BOM!]
  bomCount(where: BOMWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input InventoryWhereUniqueInput {
  id: ID
  sku: String
}

input InventoryWhereInput {
  AND: [InventoryWhereInput!]
  OR: [InventoryWhereInput!]
  NOT: [InventoryWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  batchNumber: StringFilter
  sku: StringFilter
  quantity: IntNullableFilter
  unit: StringFilter
  location: StringFilter
  expiryDate: DateTimeNullableFilter
  receivedDate: DateTimeNullableFilter
  purchasePrice: FloatNullableFilter
  salePrice: FloatNullableFilter
  status: StringNullableFilter
  supplier: StringFilter
  isReserved: BooleanFilter
  isDamaged: BooleanFilter
  users: UserManyRelationFilter
  tags: TagManyRelationFilter
  bom: BOMManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input BOMManyRelationFilter {
  every: BOMWhereInput
  some: BOMWhereInput
  none: BOMWhereInput
}

input InventoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  batchNumber: OrderDirection
  sku: OrderDirection
  quantity: OrderDirection
  unit: OrderDirection
  location: OrderDirection
  expiryDate: OrderDirection
  receivedDate: OrderDirection
  purchasePrice: OrderDirection
  salePrice: OrderDirection
  status: OrderDirection
  supplier: OrderDirection
  isReserved: OrderDirection
  isDamaged: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input InventoryUpdateInput {
  name: String
  description: String
  batchNumber: String
  sku: String
  quantity: Int
  unit: String
  location: String
  expiryDate: DateTime
  receivedDate: DateTime
  purchasePrice: Float
  salePrice: Float
  status: String
  supplier: String
  isReserved: Boolean
  isDamaged: Boolean
  users: UserRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
  bom: BOMRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input BOMRelateToManyForUpdateInput {
  disconnect: [BOMWhereUniqueInput!]
  set: [BOMWhereUniqueInput!]
  create: [BOMCreateInput!]
  connect: [BOMWhereUniqueInput!]
}

input InventoryUpdateArgs {
  where: InventoryWhereUniqueInput!
  data: InventoryUpdateInput!
}

input InventoryCreateInput {
  name: String
  description: String
  batchNumber: String
  sku: String
  quantity: Int
  unit: String
  location: String
  expiryDate: DateTime
  receivedDate: DateTime
  purchasePrice: Float
  salePrice: Float
  status: String
  supplier: String
  isReserved: Boolean
  isDamaged: Boolean
  users: UserRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
  bom: BOMRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input BOMRelateToManyForCreateInput {
  create: [BOMCreateInput!]
  connect: [BOMWhereUniqueInput!]
}

type Invitation {
  id: ID!
  email: String
  status: String
  token: String
  lists(where: ListWhereInput! = {}, orderBy: [ListOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ListWhereUniqueInput): [List!]
  listsCount(where: ListWhereInput! = {}): Int
  clusters(where: ClusterWhereInput! = {}, orderBy: [ClusterOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ClusterWhereUniqueInput): [Cluster!]
  clustersCount(where: ClusterWhereInput! = {}): Int
  user: User
  createdAt: DateTime
  updatedAt: DateTime
}

input InvitationWhereUniqueInput {
  id: ID
  token: String
}

input InvitationWhereInput {
  AND: [InvitationWhereInput!]
  OR: [InvitationWhereInput!]
  NOT: [InvitationWhereInput!]
  id: IDFilter
  email: StringFilter
  status: StringNullableFilter
  token: StringFilter
  lists: ListManyRelationFilter
  clusters: ClusterManyRelationFilter
  user: UserWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input InvitationOrderByInput {
  id: OrderDirection
  email: OrderDirection
  status: OrderDirection
  token: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input InvitationUpdateInput {
  email: String
  status: String
  token: String
  lists: ListRelateToManyForUpdateInput
  clusters: ClusterRelateToManyForUpdateInput
  user: UserRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input InvitationUpdateArgs {
  where: InvitationWhereUniqueInput!
  data: InvitationUpdateInput!
}

input InvitationCreateInput {
  email: String
  status: String
  token: String
  lists: ListRelateToManyForCreateInput
  clusters: ClusterRelateToManyForCreateInput
  user: UserRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Order {
  id: ID!
  orderNumber: String
  status: String
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  products(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductWhereUniqueInput): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  inventory(where: InventoryWhereInput! = {}, orderBy: [InventoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InventoryWhereUniqueInput): [Inventory!]
  inventoryCount(where: InventoryWhereInput! = {}): Int
  source: String
  quantity: Int
  unit: String
  currency: String
  createdAt: DateTime
  updatedAt: DateTime
}

input OrderWhereUniqueInput {
  id: ID
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
  id: IDFilter
  orderNumber: StringFilter
  status: StringNullableFilter
  users: UserManyRelationFilter
  products: ProductManyRelationFilter
  inventory: InventoryManyRelationFilter
  source: StringFilter
  quantity: IntNullableFilter
  unit: StringFilter
  currency: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input OrderOrderByInput {
  id: OrderDirection
  orderNumber: OrderDirection
  status: OrderDirection
  source: OrderDirection
  quantity: OrderDirection
  unit: OrderDirection
  currency: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input OrderUpdateInput {
  orderNumber: String
  status: String
  users: UserRelateToManyForUpdateInput
  products: ProductRelateToManyForUpdateInput
  inventory: InventoryRelateToManyForUpdateInput
  source: String
  quantity: Int
  unit: String
  currency: String
  createdAt: DateTime
  updatedAt: DateTime
}

input OrderUpdateArgs {
  where: OrderWhereUniqueInput!
  data: OrderUpdateInput!
}

input OrderCreateInput {
  orderNumber: String
  status: String
  users: UserRelateToManyForCreateInput
  products: ProductRelateToManyForCreateInput
  inventory: InventoryRelateToManyForCreateInput
  source: String
  quantity: Int
  unit: String
  currency: String
  createdAt: DateTime
  updatedAt: DateTime
}

type Integration {
  id: ID!
  user: User
  integrationType: String
  storeUrl: String
  apiKey: String
  shopId: String
  status: String
  createdAt: DateTime
  updatedAt: DateTime
}

input IntegrationWhereUniqueInput {
  id: ID
}

input IntegrationWhereInput {
  AND: [IntegrationWhereInput!]
  OR: [IntegrationWhereInput!]
  NOT: [IntegrationWhereInput!]
  id: IDFilter
  user: UserWhereInput
  integrationType: StringFilter
  storeUrl: StringFilter
  apiKey: StringFilter
  shopId: StringFilter
  status: StringNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input IntegrationOrderByInput {
  id: OrderDirection
  integrationType: OrderDirection
  storeUrl: OrderDirection
  apiKey: OrderDirection
  shopId: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input IntegrationUpdateInput {
  user: UserRelateToOneForUpdateInput
  integrationType: String
  storeUrl: String
  apiKey: String
  shopId: String
  status: String
  createdAt: DateTime
  updatedAt: DateTime
}

input IntegrationUpdateArgs {
  where: IntegrationWhereUniqueInput!
  data: IntegrationUpdateInput!
}

input IntegrationCreateInput {
  user: UserRelateToOneForCreateInput
  integrationType: String
  storeUrl: String
  apiKey: String
  shopId: String
  status: String
  createdAt: DateTime
  updatedAt: DateTime
}

type Tag {
  id: ID!
  name: String
  description: String
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  lists(where: ListWhereInput! = {}, orderBy: [ListOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ListWhereUniqueInput): [List!]
  listsCount(where: ListWhereInput! = {}): Int
  products(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductWhereUniqueInput): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  inventory(where: InventoryWhereInput! = {}, orderBy: [InventoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InventoryWhereUniqueInput): [Inventory!]
  inventoryCount(where: InventoryWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  users: UserManyRelationFilter
  lists: ListManyRelationFilter
  products: ProductManyRelationFilter
  inventory: InventoryManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
}

input TagUpdateInput {
  name: String
  description: String
  users: UserRelateToManyForUpdateInput
  lists: ListRelateToManyForUpdateInput
  products: ProductRelateToManyForUpdateInput
  inventory: InventoryRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  description: String
  users: UserRelateToManyForCreateInput
  lists: ListRelateToManyForCreateInput
  products: ProductRelateToManyForCreateInput
  inventory: InventoryRelateToManyForCreateInput
}

type BOM {
  id: ID!
  name: String
  description: String
  composite: Product
  components: Inventory
  quantity: Int
  unit: String
}

input BOMWhereUniqueInput {
  id: ID
}

input BOMWhereInput {
  AND: [BOMWhereInput!]
  OR: [BOMWhereInput!]
  NOT: [BOMWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  composite: ProductWhereInput
  components: InventoryWhereInput
  quantity: IntFilter
  unit: StringFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input BOMOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  quantity: OrderDirection
  unit: OrderDirection
}

input BOMUpdateInput {
  name: String
  description: String
  composite: ProductRelateToOneForUpdateInput
  components: InventoryRelateToOneForUpdateInput
  quantity: Int
  unit: String
}

input ProductRelateToOneForUpdateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
  disconnect: Boolean
}

input InventoryRelateToOneForUpdateInput {
  create: InventoryCreateInput
  connect: InventoryWhereUniqueInput
  disconnect: Boolean
}

input BOMUpdateArgs {
  where: BOMWhereUniqueInput!
  data: BOMUpdateInput!
}

input BOMCreateInput {
  name: String
  description: String
  composite: ProductRelateToOneForCreateInput
  components: InventoryRelateToOneForCreateInput
  quantity: Int
  unit: String
}

input ProductRelateToOneForCreateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

input InventoryRelateToOneForCreateInput {
  create: InventoryCreateInput
  connect: InventoryWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createCluster(data: ClusterCreateInput!): Cluster
  createClusters(data: [ClusterCreateInput!]!): [Cluster]
  updateCluster(where: ClusterWhereUniqueInput!, data: ClusterUpdateInput!): Cluster
  updateClusters(data: [ClusterUpdateArgs!]!): [Cluster]
  deleteCluster(where: ClusterWhereUniqueInput!): Cluster
  deleteClusters(where: [ClusterWhereUniqueInput!]!): [Cluster]
  createList(data: ListCreateInput!): List
  createLists(data: [ListCreateInput!]!): [List]
  updateList(where: ListWhereUniqueInput!, data: ListUpdateInput!): List
  updateLists(data: [ListUpdateArgs!]!): [List]
  deleteList(where: ListWhereUniqueInput!): List
  deleteLists(where: [ListWhereUniqueInput!]!): [List]
  createProduct(data: ProductCreateInput!): Product
  createProducts(data: [ProductCreateInput!]!): [Product]
  updateProduct(where: ProductWhereUniqueInput!, data: ProductUpdateInput!): Product
  updateProducts(data: [ProductUpdateArgs!]!): [Product]
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteProducts(where: [ProductWhereUniqueInput!]!): [Product]
  createInventory(data: InventoryCreateInput!): Inventory
  createInventories(data: [InventoryCreateInput!]!): [Inventory]
  updateInventory(where: InventoryWhereUniqueInput!, data: InventoryUpdateInput!): Inventory
  updateInventories(data: [InventoryUpdateArgs!]!): [Inventory]
  deleteInventory(where: InventoryWhereUniqueInput!): Inventory
  deleteInventories(where: [InventoryWhereUniqueInput!]!): [Inventory]
  createInvitation(data: InvitationCreateInput!): Invitation
  createInvitations(data: [InvitationCreateInput!]!): [Invitation]
  updateInvitation(where: InvitationWhereUniqueInput!, data: InvitationUpdateInput!): Invitation
  updateInvitations(data: [InvitationUpdateArgs!]!): [Invitation]
  deleteInvitation(where: InvitationWhereUniqueInput!): Invitation
  deleteInvitations(where: [InvitationWhereUniqueInput!]!): [Invitation]
  createOrder(data: OrderCreateInput!): Order
  createOrders(data: [OrderCreateInput!]!): [Order]
  updateOrder(where: OrderWhereUniqueInput!, data: OrderUpdateInput!): Order
  updateOrders(data: [OrderUpdateArgs!]!): [Order]
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteOrders(where: [OrderWhereUniqueInput!]!): [Order]
  createIntegration(data: IntegrationCreateInput!): Integration
  createIntegrations(data: [IntegrationCreateInput!]!): [Integration]
  updateIntegration(where: IntegrationWhereUniqueInput!, data: IntegrationUpdateInput!): Integration
  updateIntegrations(data: [IntegrationUpdateArgs!]!): [Integration]
  deleteIntegration(where: IntegrationWhereUniqueInput!): Integration
  deleteIntegrations(where: [IntegrationWhereUniqueInput!]!): [Integration]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createBOM(data: BOMCreateInput!): BOM
  createBOMS(data: [BOMCreateInput!]!): [BOM]
  updateBOM(where: BOMWhereUniqueInput!, data: BOMUpdateInput!): BOM
  updateBOMS(data: [BOMUpdateArgs!]!): [BOM]
  deleteBOM(where: BOMWhereUniqueInput!): BOM
  deleteBOMS(where: [BOMWhereUniqueInput!]!): [BOM]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  firstName: String
  email: String
  password: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  cluster(where: ClusterWhereUniqueInput!): Cluster
  clusters(where: ClusterWhereInput! = {}, orderBy: [ClusterOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ClusterWhereUniqueInput): [Cluster!]
  clustersCount(where: ClusterWhereInput! = {}): Int
  list(where: ListWhereUniqueInput!): List
  lists(where: ListWhereInput! = {}, orderBy: [ListOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ListWhereUniqueInput): [List!]
  listsCount(where: ListWhereInput! = {}): Int
  product(where: ProductWhereUniqueInput!): Product
  products(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductWhereUniqueInput): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  inventory(where: InventoryWhereUniqueInput!): Inventory
  inventories(where: InventoryWhereInput! = {}, orderBy: [InventoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InventoryWhereUniqueInput): [Inventory!]
  inventoriesCount(where: InventoryWhereInput! = {}): Int
  invitation(where: InvitationWhereUniqueInput!): Invitation
  invitations(where: InvitationWhereInput! = {}, orderBy: [InvitationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InvitationWhereUniqueInput): [Invitation!]
  invitationsCount(where: InvitationWhereInput! = {}): Int
  order(where: OrderWhereUniqueInput!): Order
  orders(where: OrderWhereInput! = {}, orderBy: [OrderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrderWhereUniqueInput): [Order!]
  ordersCount(where: OrderWhereInput! = {}): Int
  integration(where: IntegrationWhereUniqueInput!): Integration
  integrations(where: IntegrationWhereInput! = {}, orderBy: [IntegrationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: IntegrationWhereUniqueInput): [Integration!]
  integrationsCount(where: IntegrationWhereInput! = {}): Int
  tag(where: TagWhereUniqueInput!): Tag
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  bOM(where: BOMWhereUniqueInput!): BOM
  bOMS(where: BOMWhereInput! = {}, orderBy: [BOMOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BOMWhereUniqueInput): [BOM!]
  bOMSCount(where: BOMWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
