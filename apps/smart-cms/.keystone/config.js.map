{
  "version": 3,
  "sources": ["../keystone.ts", "../src/keystone/schema.ts", "../src/keystone/seed.ts"],
  "sourcesContent": ["import { config } from '@keystone-6/core';\nimport { lists } from './src/keystone/schema';\nimport { seedDemoData } from './src/keystone/seed';\nimport type { Context } from '.keystone/types';\n\nexport default config({\n  db: {\n    provider: 'sqlite',\n    url: `file:${process.cwd()}/keystone.db`, // next.js requires an absolute path for sqlite\n    onConnect: async (context: Context) => {\n      await seedDemoData(context);\n    },\n  },\n  lists,\n});\n", "import { list } from '@keystone-6/core';\nimport { allowAll } from '@keystone-6/core/access';\nimport { text, timestamp } from '@keystone-6/core/fields';\nimport { document } from '@keystone-6/fields-document';\n\nexport const lists = {\n  User: list({\n    // WARNING\n    //   for this example, anyone can create, query, update and delete anything\n    //   if you want to prevent random people on the internet from accessing your data,\n    //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n    access: allowAll,\n\n    fields: {\n      name: text({ validation: { isRequired: true } }),\n      about: document({\n        formatting: true,\n        dividers: true,\n        links: true,\n        layouts: [\n          [1, 1],\n          [1, 1, 1],\n        ],\n      }),\n      createdAt: timestamp({\n        defaultValue: { kind: 'now' },\n      }),\n    },\n  }),\n};\n", "import type { Context } from '.keystone/types';\n\nexport async function seedDemoData(context: Context) {\n  if ((await context.db.User.count()) > 0) return;\n\n  for (const user of [\n    {\n      name: 'Clark',\n    },\n    {\n      name: 'Bruce',\n    },\n    {\n      name: 'Diana',\n    },\n  ] as const) {\n    await context.db.User.createOne({ data: user });\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAA,eAAuB;;;ACAvB,kBAAqB;AACrB,oBAAyB;AACzB,oBAAgC;AAChC,6BAAyB;AAElB,IAAM,QAAQ;AAAA,EACnB,UAAM,kBAAK;AAAA;AAAA;AAAA;AAAA;AAAA,IAKT,QAAQ;AAAA,IAER,QAAQ;AAAA,MACN,UAAM,oBAAK,EAAE,YAAY,EAAE,YAAY,KAAK,EAAE,CAAC;AAAA,MAC/C,WAAO,iCAAS;AAAA,QACd,YAAY;AAAA,QACZ,UAAU;AAAA,QACV,OAAO;AAAA,QACP,SAAS;AAAA,UACP,CAAC,GAAG,CAAC;AAAA,UACL,CAAC,GAAG,GAAG,CAAC;AAAA,QACV;AAAA,MACF,CAAC;AAAA,MACD,eAAW,yBAAU;AAAA,QACnB,cAAc,EAAE,MAAM,MAAM;AAAA,MAC9B,CAAC;AAAA,IACH;AAAA,EACF,CAAC;AACH;;;AC3BA,eAAsB,aAAa,SAAkB;AACnD,MAAK,MAAM,QAAQ,GAAG,KAAK,MAAM,IAAK,EAAG;AAEzC,aAAW,QAAQ;AAAA,IACjB;AAAA,MACE,MAAM;AAAA,IACR;AAAA,IACA;AAAA,MACE,MAAM;AAAA,IACR;AAAA,IACA;AAAA,MACE,MAAM;AAAA,IACR;AAAA,EACF,GAAY;AACV,UAAM,QAAQ,GAAG,KAAK,UAAU,EAAE,MAAM,KAAK,CAAC;AAAA,EAChD;AACF;;;AFbA,IAAO,uBAAQ,qBAAO;AAAA,EACpB,IAAI;AAAA,IACF,UAAU;AAAA,IACV,KAAK,QAAQ,QAAQ,IAAI,CAAC;AAAA;AAAA,IAC1B,WAAW,OAAO,YAAqB;AACrC,YAAM,aAAa,OAAO;AAAA,IAC5B;AAAA,EACF;AAAA,EACA;AACF,CAAC;",
  "names": ["import_core"]
}
